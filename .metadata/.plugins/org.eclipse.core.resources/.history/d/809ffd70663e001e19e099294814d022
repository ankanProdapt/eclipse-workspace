package textFileProcessor;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class TextFileProcessor {
	private Stack<String> textStack;
	private Stack<String> performedOperations;
	private List<String> commands;
	
	private static final String OPEN_SYMBOL = "<";
	private static final String CLOSE_SYMBOL = "<";
	private static final String UNDO = "undo";
	private static final String BACKSPACE = "bksp";
	private static final String EMPTY = "";
	private static final String SPACE = " ";
	

	public TextFileProcessor(String textFile, String commandFile) {
		textStack = new Stack<>();
		performedOperations = new Stack<>();
		
		textStack.addAll(getFileContent(textFile));
		commands = getFileContent(commandFile);
	}

	public List<String> getFileContent(String fileName) {
		Path p = Paths.get(fileName);

		try {
			List<String> lines = Files.readAllLines(p);
			List<String> content = new ArrayList<>();
			
			for(String line: lines) {
				for(int i = 0; i < line.length(); i++) {
					content.add(line.substring(i, i + 1));
				}
				content.add("\n");
			}
			
			return content;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}
	
	public void execute() throws InvalidUndoOperationException{
		boolean isSpecialCommand = false;
		String specialCommand = "";
		
		for(String c: commands) {
			if(isSpecialCommand) {
				if(c.equals(CLOSE_SYMBOL)) {
					if(specialCommand.equals(UNDO)) {
						executeUndo();
					}
					else if(specialCommand.equals(BACKSPACE)) {
						executeBackSpace();
					}
					isSpecialCommand = false;
					specialCommand = EMPTY;
				}
				else {
					specialCommand += c;
				}
			}
			
			else {
				if(c.equals(OPEN_SYMBOL)) {
					isSpecialCommand = true;
				}
				else {
					textStack.add(c);
					performedOperations.add(ADD + SPACE + c);
				}
			}
		}
	}
	
}
